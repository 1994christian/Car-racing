// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla_protocol.proto

#ifndef PROTOBUF_carla_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_carla_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_carla_5fprotocol_2eproto();
void protobuf_AssignDesc_carla_5fprotocol_2eproto();
void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

class EpisodeStart;
class SceneInit;
class Control;
class World;
class Scene;
class Scene_Projection_Matrix;
class Scene_Position;
class EpisodeReady;
class Reward;

// ===================================================================

class EpisodeStart : public ::google::protobuf::Message {
 public:
  EpisodeStart();
  virtual ~EpisodeStart();

  EpisodeStart(const EpisodeStart& from);

  inline EpisodeStart& operator=(const EpisodeStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EpisodeStart& default_instance();

  void Swap(EpisodeStart* other);

  // implements Message ----------------------------------------------

  EpisodeStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EpisodeStart& from);
  void MergeFrom(const EpisodeStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 start_index = 1;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 1;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 2;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 2;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EpisodeStart)
 private:
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static EpisodeStart* default_instance_;
};
// -------------------------------------------------------------------

class SceneInit : public ::google::protobuf::Message {
 public:
  SceneInit();
  virtual ~SceneInit();

  SceneInit(const SceneInit& from);

  inline SceneInit& operator=(const SceneInit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneInit& default_instance();

  void Swap(SceneInit* other);

  // implements Message ----------------------------------------------

  SceneInit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneInit& from);
  void MergeFrom(const SceneInit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int32 scene = 2;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 2;
  inline ::google::protobuf::int32 scene() const;
  inline void set_scene(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneInit)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_scene();
  inline void clear_has_scene();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 scene_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SceneInit* default_instance_;
};
// -------------------------------------------------------------------

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();

  void Swap(Control* other);

  // implements Message ----------------------------------------------

  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float steer = 1;
  inline bool has_steer() const;
  inline void clear_steer();
  static const int kSteerFieldNumber = 1;
  inline float steer() const;
  inline void set_steer(float value);

  // optional float gas = 2;
  inline bool has_gas() const;
  inline void clear_gas();
  static const int kGasFieldNumber = 2;
  inline float gas() const;
  inline void set_gas(float value);

  // @@protoc_insertion_point(class_scope:Control)
 private:
  inline void set_has_steer();
  inline void clear_has_steer();
  inline void set_has_gas();
  inline void clear_has_gas();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float steer_;
  float gas_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// -------------------------------------------------------------------

class World : public ::google::protobuf::Message {
 public:
  World();
  virtual ~World();

  World(const World& from);

  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const World& default_instance();

  void Swap(World* other);

  // implements Message ----------------------------------------------

  World* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const World& from);
  void MergeFrom(const World& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 modes = 1;
  inline int modes_size() const;
  inline void clear_modes();
  static const int kModesFieldNumber = 1;
  inline ::google::protobuf::int32 modes(int index) const;
  inline void set_modes(int index, ::google::protobuf::int32 value);
  inline void add_modes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      modes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_modes();

  // repeated int32 scenes = 2;
  inline int scenes_size() const;
  inline void clear_scenes();
  static const int kScenesFieldNumber = 2;
  inline ::google::protobuf::int32 scenes(int index) const;
  inline void set_scenes(int index, ::google::protobuf::int32 value);
  inline void add_scenes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scenes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scenes();

  // @@protoc_insertion_point(class_scope:World)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > modes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scenes_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static World* default_instance_;
};
// -------------------------------------------------------------------

class Scene_Projection_Matrix : public ::google::protobuf::Message {
 public:
  Scene_Projection_Matrix();
  virtual ~Scene_Projection_Matrix();

  Scene_Projection_Matrix(const Scene_Projection_Matrix& from);

  inline Scene_Projection_Matrix& operator=(const Scene_Projection_Matrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene_Projection_Matrix& default_instance();

  void Swap(Scene_Projection_Matrix* other);

  // implements Message ----------------------------------------------

  Scene_Projection_Matrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene_Projection_Matrix& from);
  void MergeFrom(const Scene_Projection_Matrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cam_param = 1;
  inline int cam_param_size() const;
  inline void clear_cam_param();
  static const int kCamParamFieldNumber = 1;
  inline float cam_param(int index) const;
  inline void set_cam_param(int index, float value);
  inline void add_cam_param(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      cam_param() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_cam_param();

  // @@protoc_insertion_point(class_scope:Scene.Projection_Matrix)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > cam_param_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Scene_Projection_Matrix* default_instance_;
};
// -------------------------------------------------------------------

class Scene_Position : public ::google::protobuf::Message {
 public:
  Scene_Position();
  virtual ~Scene_Position();

  Scene_Position(const Scene_Position& from);

  inline Scene_Position& operator=(const Scene_Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene_Position& default_instance();

  void Swap(Scene_Position* other);

  // implements Message ----------------------------------------------

  Scene_Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene_Position& from);
  void MergeFrom(const Scene_Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline float pos_x() const;
  inline void set_pos_x(float value);

  // required float pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline float pos_y() const;
  inline void set_pos_y(float value);

  // @@protoc_insertion_point(class_scope:Scene.Position)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float pos_x_;
  float pos_y_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Scene_Position* default_instance_;
};
// -------------------------------------------------------------------

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Scene_Projection_Matrix Projection_Matrix;
  typedef Scene_Position Position;

  // accessors -------------------------------------------------------

  // repeated .Scene.Position position = 1;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::Scene_Position& position(int index) const;
  inline ::Scene_Position* mutable_position(int index);
  inline ::Scene_Position* add_position();
  inline const ::google::protobuf::RepeatedPtrField< ::Scene_Position >&
      position() const;
  inline ::google::protobuf::RepeatedPtrField< ::Scene_Position >*
      mutable_position();

  // repeated .Scene.Projection_Matrix camera_matrix = 2;
  inline int camera_matrix_size() const;
  inline void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 2;
  inline const ::Scene_Projection_Matrix& camera_matrix(int index) const;
  inline ::Scene_Projection_Matrix* mutable_camera_matrix(int index);
  inline ::Scene_Projection_Matrix* add_camera_matrix();
  inline const ::google::protobuf::RepeatedPtrField< ::Scene_Projection_Matrix >&
      camera_matrix() const;
  inline ::google::protobuf::RepeatedPtrField< ::Scene_Projection_Matrix >*
      mutable_camera_matrix();

  // @@protoc_insertion_point(class_scope:Scene)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Scene_Position > position_;
  ::google::protobuf::RepeatedPtrField< ::Scene_Projection_Matrix > camera_matrix_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// -------------------------------------------------------------------

class EpisodeReady : public ::google::protobuf::Message {
 public:
  EpisodeReady();
  virtual ~EpisodeReady();

  EpisodeReady(const EpisodeReady& from);

  inline EpisodeReady& operator=(const EpisodeReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EpisodeReady& default_instance();

  void Swap(EpisodeReady* other);

  // implements Message ----------------------------------------------

  EpisodeReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EpisodeReady& from);
  void MergeFrom(const EpisodeReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ready = 1;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline bool ready() const;
  inline void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:EpisodeReady)
 private:
  inline void set_has_ready();
  inline void clear_has_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ready_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static EpisodeReady* default_instance_;
};
// -------------------------------------------------------------------

class Reward : public ::google::protobuf::Message {
 public:
  Reward();
  virtual ~Reward();

  Reward(const Reward& from);

  inline Reward& operator=(const Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reward& default_instance();

  void Swap(Reward* other);

  // implements Message ----------------------------------------------

  Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reward& from);
  void MergeFrom(const Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float player_x = 1;
  inline bool has_player_x() const;
  inline void clear_player_x();
  static const int kPlayerXFieldNumber = 1;
  inline float player_x() const;
  inline void set_player_x(float value);

  // optional float player_y = 2;
  inline bool has_player_y() const;
  inline void clear_player_y();
  static const int kPlayerYFieldNumber = 2;
  inline float player_y() const;
  inline void set_player_y(float value);

  // optional float speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline float speed() const;
  inline void set_speed(float value);

  // optional float collision_gen = 4;
  inline bool has_collision_gen() const;
  inline void clear_collision_gen();
  static const int kCollisionGenFieldNumber = 4;
  inline float collision_gen() const;
  inline void set_collision_gen(float value);

  // optional float collision_ped = 5;
  inline bool has_collision_ped() const;
  inline void clear_collision_ped();
  static const int kCollisionPedFieldNumber = 5;
  inline float collision_ped() const;
  inline void set_collision_ped(float value);

  // optional float collision_car = 6;
  inline bool has_collision_car() const;
  inline void clear_collision_car();
  static const int kCollisionCarFieldNumber = 6;
  inline float collision_car() const;
  inline void set_collision_car(float value);

  // optional float intersect = 7;
  inline bool has_intersect() const;
  inline void clear_intersect();
  static const int kIntersectFieldNumber = 7;
  inline float intersect() const;
  inline void set_intersect(float value);

  // optional float inertia_x = 8;
  inline bool has_inertia_x() const;
  inline void clear_inertia_x();
  static const int kInertiaXFieldNumber = 8;
  inline float inertia_x() const;
  inline void set_inertia_x(float value);

  // optional float inertia_y = 9;
  inline bool has_inertia_y() const;
  inline void clear_inertia_y();
  static const int kInertiaYFieldNumber = 9;
  inline float inertia_y() const;
  inline void set_inertia_y(float value);

  // optional float inertia_z = 10;
  inline bool has_inertia_z() const;
  inline void clear_inertia_z();
  static const int kInertiaZFieldNumber = 10;
  inline float inertia_z() const;
  inline void set_inertia_z(float value);

  // optional int32 timestamp = 11;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional float ori_x = 12;
  inline bool has_ori_x() const;
  inline void clear_ori_x();
  static const int kOriXFieldNumber = 12;
  inline float ori_x() const;
  inline void set_ori_x(float value);

  // optional float ori_y = 13;
  inline bool has_ori_y() const;
  inline void clear_ori_y();
  static const int kOriYFieldNumber = 13;
  inline float ori_y() const;
  inline void set_ori_y(float value);

  // optional float ori_z = 14;
  inline bool has_ori_z() const;
  inline void clear_ori_z();
  static const int kOriZFieldNumber = 14;
  inline float ori_z() const;
  inline void set_ori_z(float value);

  // repeated bytes image = 15;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 15;
  inline const ::std::string& image(int index) const;
  inline ::std::string* mutable_image(int index);
  inline void set_image(int index, const ::std::string& value);
  inline void set_image(int index, const char* value);
  inline void set_image(int index, const void* value, size_t size);
  inline ::std::string* add_image();
  inline void add_image(const ::std::string& value);
  inline void add_image(const char* value);
  inline void add_image(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& image() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image();

  // repeated bytes depth = 16;
  inline int depth_size() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 16;
  inline const ::std::string& depth(int index) const;
  inline ::std::string* mutable_depth(int index);
  inline void set_depth(int index, const ::std::string& value);
  inline void set_depth(int index, const char* value);
  inline void set_depth(int index, const void* value, size_t size);
  inline ::std::string* add_depth();
  inline void add_depth(const ::std::string& value);
  inline void add_depth(const char* value);
  inline void add_depth(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& depth() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_depth();

  // @@protoc_insertion_point(class_scope:Reward)
 private:
  inline void set_has_player_x();
  inline void clear_has_player_x();
  inline void set_has_player_y();
  inline void clear_has_player_y();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_collision_gen();
  inline void clear_has_collision_gen();
  inline void set_has_collision_ped();
  inline void clear_has_collision_ped();
  inline void set_has_collision_car();
  inline void clear_has_collision_car();
  inline void set_has_intersect();
  inline void clear_has_intersect();
  inline void set_has_inertia_x();
  inline void clear_has_inertia_x();
  inline void set_has_inertia_y();
  inline void clear_has_inertia_y();
  inline void set_has_inertia_z();
  inline void clear_has_inertia_z();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ori_x();
  inline void clear_has_ori_x();
  inline void set_has_ori_y();
  inline void clear_has_ori_y();
  inline void set_has_ori_z();
  inline void clear_has_ori_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float player_x_;
  float player_y_;
  float speed_;
  float collision_gen_;
  float collision_ped_;
  float collision_car_;
  float intersect_;
  float inertia_x_;
  float inertia_y_;
  float inertia_z_;
  ::google::protobuf::int32 timestamp_;
  float ori_x_;
  float ori_y_;
  float ori_z_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_;
  ::google::protobuf::RepeatedPtrField< ::std::string> depth_;
  friend void  protobuf_AddDesc_carla_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_carla_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_carla_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Reward* default_instance_;
};
// ===================================================================


// ===================================================================

// EpisodeStart

// optional int32 start_index = 1;
inline bool EpisodeStart::has_start_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EpisodeStart::set_has_start_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EpisodeStart::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EpisodeStart::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 EpisodeStart::start_index() const {
  // @@protoc_insertion_point(field_get:EpisodeStart.start_index)
  return start_index_;
}
inline void EpisodeStart::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStart.start_index)
}

// optional int32 end_index = 2;
inline bool EpisodeStart::has_end_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EpisodeStart::set_has_end_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EpisodeStart::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EpisodeStart::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 EpisodeStart::end_index() const {
  // @@protoc_insertion_point(field_get:EpisodeStart.end_index)
  return end_index_;
}
inline void EpisodeStart::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStart.end_index)
}

// -------------------------------------------------------------------

// SceneInit

// optional int32 mode = 1;
inline bool SceneInit::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneInit::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneInit::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneInit::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 SceneInit::mode() const {
  // @@protoc_insertion_point(field_get:SceneInit.mode)
  return mode_;
}
inline void SceneInit::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:SceneInit.mode)
}

// optional int32 scene = 2;
inline bool SceneInit::has_scene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneInit::set_has_scene() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneInit::clear_has_scene() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneInit::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 SceneInit::scene() const {
  // @@protoc_insertion_point(field_get:SceneInit.scene)
  return scene_;
}
inline void SceneInit::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:SceneInit.scene)
}

// -------------------------------------------------------------------

// Control

// optional float steer = 1;
inline bool Control::has_steer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_steer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_steer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
inline float Control::steer() const {
  // @@protoc_insertion_point(field_get:Control.steer)
  return steer_;
}
inline void Control::set_steer(float value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:Control.steer)
}

// optional float gas = 2;
inline bool Control::has_gas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control::set_has_gas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control::clear_has_gas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control::clear_gas() {
  gas_ = 0;
  clear_has_gas();
}
inline float Control::gas() const {
  // @@protoc_insertion_point(field_get:Control.gas)
  return gas_;
}
inline void Control::set_gas(float value) {
  set_has_gas();
  gas_ = value;
  // @@protoc_insertion_point(field_set:Control.gas)
}

// -------------------------------------------------------------------

// World

// repeated int32 modes = 1;
inline int World::modes_size() const {
  return modes_.size();
}
inline void World::clear_modes() {
  modes_.Clear();
}
inline ::google::protobuf::int32 World::modes(int index) const {
  // @@protoc_insertion_point(field_get:World.modes)
  return modes_.Get(index);
}
inline void World::set_modes(int index, ::google::protobuf::int32 value) {
  modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:World.modes)
}
inline void World::add_modes(::google::protobuf::int32 value) {
  modes_.Add(value);
  // @@protoc_insertion_point(field_add:World.modes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
World::modes() const {
  // @@protoc_insertion_point(field_list:World.modes)
  return modes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
World::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:World.modes)
  return &modes_;
}

// repeated int32 scenes = 2;
inline int World::scenes_size() const {
  return scenes_.size();
}
inline void World::clear_scenes() {
  scenes_.Clear();
}
inline ::google::protobuf::int32 World::scenes(int index) const {
  // @@protoc_insertion_point(field_get:World.scenes)
  return scenes_.Get(index);
}
inline void World::set_scenes(int index, ::google::protobuf::int32 value) {
  scenes_.Set(index, value);
  // @@protoc_insertion_point(field_set:World.scenes)
}
inline void World::add_scenes(::google::protobuf::int32 value) {
  scenes_.Add(value);
  // @@protoc_insertion_point(field_add:World.scenes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
World::scenes() const {
  // @@protoc_insertion_point(field_list:World.scenes)
  return scenes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
World::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:World.scenes)
  return &scenes_;
}

// -------------------------------------------------------------------

// Scene_Projection_Matrix

// repeated float cam_param = 1;
inline int Scene_Projection_Matrix::cam_param_size() const {
  return cam_param_.size();
}
inline void Scene_Projection_Matrix::clear_cam_param() {
  cam_param_.Clear();
}
inline float Scene_Projection_Matrix::cam_param(int index) const {
  // @@protoc_insertion_point(field_get:Scene.Projection_Matrix.cam_param)
  return cam_param_.Get(index);
}
inline void Scene_Projection_Matrix::set_cam_param(int index, float value) {
  cam_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:Scene.Projection_Matrix.cam_param)
}
inline void Scene_Projection_Matrix::add_cam_param(float value) {
  cam_param_.Add(value);
  // @@protoc_insertion_point(field_add:Scene.Projection_Matrix.cam_param)
}
inline const ::google::protobuf::RepeatedField< float >&
Scene_Projection_Matrix::cam_param() const {
  // @@protoc_insertion_point(field_list:Scene.Projection_Matrix.cam_param)
  return cam_param_;
}
inline ::google::protobuf::RepeatedField< float >*
Scene_Projection_Matrix::mutable_cam_param() {
  // @@protoc_insertion_point(field_mutable_list:Scene.Projection_Matrix.cam_param)
  return &cam_param_;
}

// -------------------------------------------------------------------

// Scene_Position

// required float pos_x = 1;
inline bool Scene_Position::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scene_Position::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scene_Position::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scene_Position::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float Scene_Position::pos_x() const {
  // @@protoc_insertion_point(field_get:Scene.Position.pos_x)
  return pos_x_;
}
inline void Scene_Position::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:Scene.Position.pos_x)
}

// required float pos_y = 2;
inline bool Scene_Position::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scene_Position::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scene_Position::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scene_Position::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float Scene_Position::pos_y() const {
  // @@protoc_insertion_point(field_get:Scene.Position.pos_y)
  return pos_y_;
}
inline void Scene_Position::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:Scene.Position.pos_y)
}

// -------------------------------------------------------------------

// Scene

// repeated .Scene.Position position = 1;
inline int Scene::position_size() const {
  return position_.size();
}
inline void Scene::clear_position() {
  position_.Clear();
}
inline const ::Scene_Position& Scene::position(int index) const {
  // @@protoc_insertion_point(field_get:Scene.position)
  return position_.Get(index);
}
inline ::Scene_Position* Scene::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:Scene.position)
  return position_.Mutable(index);
}
inline ::Scene_Position* Scene::add_position() {
  // @@protoc_insertion_point(field_add:Scene.position)
  return position_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Scene_Position >&
Scene::position() const {
  // @@protoc_insertion_point(field_list:Scene.position)
  return position_;
}
inline ::google::protobuf::RepeatedPtrField< ::Scene_Position >*
Scene::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:Scene.position)
  return &position_;
}

// repeated .Scene.Projection_Matrix camera_matrix = 2;
inline int Scene::camera_matrix_size() const {
  return camera_matrix_.size();
}
inline void Scene::clear_camera_matrix() {
  camera_matrix_.Clear();
}
inline const ::Scene_Projection_Matrix& Scene::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:Scene.camera_matrix)
  return camera_matrix_.Get(index);
}
inline ::Scene_Projection_Matrix* Scene::mutable_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:Scene.camera_matrix)
  return camera_matrix_.Mutable(index);
}
inline ::Scene_Projection_Matrix* Scene::add_camera_matrix() {
  // @@protoc_insertion_point(field_add:Scene.camera_matrix)
  return camera_matrix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Scene_Projection_Matrix >&
Scene::camera_matrix() const {
  // @@protoc_insertion_point(field_list:Scene.camera_matrix)
  return camera_matrix_;
}
inline ::google::protobuf::RepeatedPtrField< ::Scene_Projection_Matrix >*
Scene::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:Scene.camera_matrix)
  return &camera_matrix_;
}

// -------------------------------------------------------------------

// EpisodeReady

// optional bool ready = 1;
inline bool EpisodeReady::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EpisodeReady::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EpisodeReady::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EpisodeReady::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool EpisodeReady::ready() const {
  // @@protoc_insertion_point(field_get:EpisodeReady.ready)
  return ready_;
}
inline void EpisodeReady::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:EpisodeReady.ready)
}

// -------------------------------------------------------------------

// Reward

// optional float player_x = 1;
inline bool Reward::has_player_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reward::set_has_player_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reward::clear_has_player_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reward::clear_player_x() {
  player_x_ = 0;
  clear_has_player_x();
}
inline float Reward::player_x() const {
  // @@protoc_insertion_point(field_get:Reward.player_x)
  return player_x_;
}
inline void Reward::set_player_x(float value) {
  set_has_player_x();
  player_x_ = value;
  // @@protoc_insertion_point(field_set:Reward.player_x)
}

// optional float player_y = 2;
inline bool Reward::has_player_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reward::set_has_player_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reward::clear_has_player_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reward::clear_player_y() {
  player_y_ = 0;
  clear_has_player_y();
}
inline float Reward::player_y() const {
  // @@protoc_insertion_point(field_get:Reward.player_y)
  return player_y_;
}
inline void Reward::set_player_y(float value) {
  set_has_player_y();
  player_y_ = value;
  // @@protoc_insertion_point(field_set:Reward.player_y)
}

// optional float speed = 3;
inline bool Reward::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reward::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reward::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reward::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float Reward::speed() const {
  // @@protoc_insertion_point(field_get:Reward.speed)
  return speed_;
}
inline void Reward::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Reward.speed)
}

// optional float collision_gen = 4;
inline bool Reward::has_collision_gen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Reward::set_has_collision_gen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Reward::clear_has_collision_gen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Reward::clear_collision_gen() {
  collision_gen_ = 0;
  clear_has_collision_gen();
}
inline float Reward::collision_gen() const {
  // @@protoc_insertion_point(field_get:Reward.collision_gen)
  return collision_gen_;
}
inline void Reward::set_collision_gen(float value) {
  set_has_collision_gen();
  collision_gen_ = value;
  // @@protoc_insertion_point(field_set:Reward.collision_gen)
}

// optional float collision_ped = 5;
inline bool Reward::has_collision_ped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Reward::set_has_collision_ped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Reward::clear_has_collision_ped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Reward::clear_collision_ped() {
  collision_ped_ = 0;
  clear_has_collision_ped();
}
inline float Reward::collision_ped() const {
  // @@protoc_insertion_point(field_get:Reward.collision_ped)
  return collision_ped_;
}
inline void Reward::set_collision_ped(float value) {
  set_has_collision_ped();
  collision_ped_ = value;
  // @@protoc_insertion_point(field_set:Reward.collision_ped)
}

// optional float collision_car = 6;
inline bool Reward::has_collision_car() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Reward::set_has_collision_car() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Reward::clear_has_collision_car() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Reward::clear_collision_car() {
  collision_car_ = 0;
  clear_has_collision_car();
}
inline float Reward::collision_car() const {
  // @@protoc_insertion_point(field_get:Reward.collision_car)
  return collision_car_;
}
inline void Reward::set_collision_car(float value) {
  set_has_collision_car();
  collision_car_ = value;
  // @@protoc_insertion_point(field_set:Reward.collision_car)
}

// optional float intersect = 7;
inline bool Reward::has_intersect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Reward::set_has_intersect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Reward::clear_has_intersect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Reward::clear_intersect() {
  intersect_ = 0;
  clear_has_intersect();
}
inline float Reward::intersect() const {
  // @@protoc_insertion_point(field_get:Reward.intersect)
  return intersect_;
}
inline void Reward::set_intersect(float value) {
  set_has_intersect();
  intersect_ = value;
  // @@protoc_insertion_point(field_set:Reward.intersect)
}

// optional float inertia_x = 8;
inline bool Reward::has_inertia_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Reward::set_has_inertia_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Reward::clear_has_inertia_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Reward::clear_inertia_x() {
  inertia_x_ = 0;
  clear_has_inertia_x();
}
inline float Reward::inertia_x() const {
  // @@protoc_insertion_point(field_get:Reward.inertia_x)
  return inertia_x_;
}
inline void Reward::set_inertia_x(float value) {
  set_has_inertia_x();
  inertia_x_ = value;
  // @@protoc_insertion_point(field_set:Reward.inertia_x)
}

// optional float inertia_y = 9;
inline bool Reward::has_inertia_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Reward::set_has_inertia_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Reward::clear_has_inertia_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Reward::clear_inertia_y() {
  inertia_y_ = 0;
  clear_has_inertia_y();
}
inline float Reward::inertia_y() const {
  // @@protoc_insertion_point(field_get:Reward.inertia_y)
  return inertia_y_;
}
inline void Reward::set_inertia_y(float value) {
  set_has_inertia_y();
  inertia_y_ = value;
  // @@protoc_insertion_point(field_set:Reward.inertia_y)
}

// optional float inertia_z = 10;
inline bool Reward::has_inertia_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Reward::set_has_inertia_z() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Reward::clear_has_inertia_z() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Reward::clear_inertia_z() {
  inertia_z_ = 0;
  clear_has_inertia_z();
}
inline float Reward::inertia_z() const {
  // @@protoc_insertion_point(field_get:Reward.inertia_z)
  return inertia_z_;
}
inline void Reward::set_inertia_z(float value) {
  set_has_inertia_z();
  inertia_z_ = value;
  // @@protoc_insertion_point(field_set:Reward.inertia_z)
}

// optional int32 timestamp = 11;
inline bool Reward::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Reward::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Reward::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Reward::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 Reward::timestamp() const {
  // @@protoc_insertion_point(field_get:Reward.timestamp)
  return timestamp_;
}
inline void Reward::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Reward.timestamp)
}

// optional float ori_x = 12;
inline bool Reward::has_ori_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Reward::set_has_ori_x() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Reward::clear_has_ori_x() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Reward::clear_ori_x() {
  ori_x_ = 0;
  clear_has_ori_x();
}
inline float Reward::ori_x() const {
  // @@protoc_insertion_point(field_get:Reward.ori_x)
  return ori_x_;
}
inline void Reward::set_ori_x(float value) {
  set_has_ori_x();
  ori_x_ = value;
  // @@protoc_insertion_point(field_set:Reward.ori_x)
}

// optional float ori_y = 13;
inline bool Reward::has_ori_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Reward::set_has_ori_y() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Reward::clear_has_ori_y() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Reward::clear_ori_y() {
  ori_y_ = 0;
  clear_has_ori_y();
}
inline float Reward::ori_y() const {
  // @@protoc_insertion_point(field_get:Reward.ori_y)
  return ori_y_;
}
inline void Reward::set_ori_y(float value) {
  set_has_ori_y();
  ori_y_ = value;
  // @@protoc_insertion_point(field_set:Reward.ori_y)
}

// optional float ori_z = 14;
inline bool Reward::has_ori_z() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Reward::set_has_ori_z() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Reward::clear_has_ori_z() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Reward::clear_ori_z() {
  ori_z_ = 0;
  clear_has_ori_z();
}
inline float Reward::ori_z() const {
  // @@protoc_insertion_point(field_get:Reward.ori_z)
  return ori_z_;
}
inline void Reward::set_ori_z(float value) {
  set_has_ori_z();
  ori_z_ = value;
  // @@protoc_insertion_point(field_set:Reward.ori_z)
}

// repeated bytes image = 15;
inline int Reward::image_size() const {
  return image_.size();
}
inline void Reward::clear_image() {
  image_.Clear();
}
inline const ::std::string& Reward::image(int index) const {
  // @@protoc_insertion_point(field_get:Reward.image)
  return image_.Get(index);
}
inline ::std::string* Reward::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:Reward.image)
  return image_.Mutable(index);
}
inline void Reward::set_image(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Reward.image)
  image_.Mutable(index)->assign(value);
}
inline void Reward::set_image(int index, const char* value) {
  image_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Reward.image)
}
inline void Reward::set_image(int index, const void* value, size_t size) {
  image_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Reward.image)
}
inline ::std::string* Reward::add_image() {
  return image_.Add();
}
inline void Reward::add_image(const ::std::string& value) {
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Reward.image)
}
inline void Reward::add_image(const char* value) {
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Reward.image)
}
inline void Reward::add_image(const void* value, size_t size) {
  image_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Reward.image)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reward::image() const {
  // @@protoc_insertion_point(field_list:Reward.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Reward::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:Reward.image)
  return &image_;
}

// repeated bytes depth = 16;
inline int Reward::depth_size() const {
  return depth_.size();
}
inline void Reward::clear_depth() {
  depth_.Clear();
}
inline const ::std::string& Reward::depth(int index) const {
  // @@protoc_insertion_point(field_get:Reward.depth)
  return depth_.Get(index);
}
inline ::std::string* Reward::mutable_depth(int index) {
  // @@protoc_insertion_point(field_mutable:Reward.depth)
  return depth_.Mutable(index);
}
inline void Reward::set_depth(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Reward.depth)
  depth_.Mutable(index)->assign(value);
}
inline void Reward::set_depth(int index, const char* value) {
  depth_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Reward.depth)
}
inline void Reward::set_depth(int index, const void* value, size_t size) {
  depth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Reward.depth)
}
inline ::std::string* Reward::add_depth() {
  return depth_.Add();
}
inline void Reward::add_depth(const ::std::string& value) {
  depth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Reward.depth)
}
inline void Reward::add_depth(const char* value) {
  depth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Reward.depth)
}
inline void Reward::add_depth(const void* value, size_t size) {
  depth_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Reward.depth)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reward::depth() const {
  // @@protoc_insertion_point(field_list:Reward.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Reward::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:Reward.depth)
  return &depth_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_carla_5fprotocol_2eproto__INCLUDED
